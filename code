import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.linear_model import LinearRegression, Lasso, Ridge, ElasticNet, SGDRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.svm import SVR

# ----------------- Load and Prepare Data ---------------------
data = pd.read_csv("D:\YOUTUBE MODEL\CLIMATE PREDECTION\climate_prediction.csv")
data = data.drop(columns='Unnamed: 0')
x = data[['Humidity (%)', 'Wind Speed (km/h)', 'Pressure (hPa)', 'Cloud Cover (%)']]
y = data['Temperature (Â°C)']

# ----------------- Split Data ---------------------
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.20, random_state=42)

# ----------------- Standardize Features ---------------------
scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

# ----------- Grid Search Parameters --------------------
param_grid_lasso = {'alpha': [0.001, 0.01, 0.1, 1, 10, 100]}
param_grid_ridge = {'alpha': [0.001, 0.01, 0.1, 1, 10, 100]}
param_grid_elasticnet = {'alpha': [0.001, 0.01, 0.1, 1, 10], 'l1_ratio': [0.1, 0.3, 0.5, 0.7, 0.9]}
param_grid_sgd = {'alpha': [0.0001, 0.001, 0.01, 0.1], 'penalty': ['l2', 'l1', 'elasticnet'], 'max_iter': [1000, 2000]}

# Adding Random Forest Regressor and SVR with their hyperparameters
param_grid_rf = {'n_estimators': [50, 100, 200], 'max_depth': [None, 10, 20, 30], 'min_samples_split': [2, 5, 10]}
param_grid_svr = {'C': [0.1, 1, 10], 'epsilon': [0.01, 0.1, 0.5], 'kernel': ['linear', 'rbf']}

# -------------------- Key (model name) :  Value(model function(), para_grid) -------------------
models = {
    'Linear Regression': LinearRegression(),
    'Lasso': (Lasso(), param_grid_lasso),
    'Ridge': (Ridge(), param_grid_ridge),
    'ElasticNet': (ElasticNet(), param_grid_elasticnet),
    'SGDRegressor': (SGDRegressor(), param_grid_sgd),
    'Random Forest': (RandomForestRegressor(), param_grid_rf),
    'SVR': (SVR(), param_grid_svr)
}

# -------- Empty Dictionary ---------------------
best_models = {}

# ---------- Linear Model Training ----------------------------------------
model_1 = LinearRegression()
model_1.fit(x_train, y_train)
mp1 = model_1.predict(x_train)              #------- mp1 - Model Prediction (Linear)
mse_linear = mean_squared_error(y_train, mp1)
r2_linear = r2_score(y_train, mp1) * 100
best_models['Linear Regression'] = {'Best Score (MSE)': mse_linear, 'Accuracy (R2 Score)': r2_linear}

# ------------------ Grid Search for Other Models -----------------------
for model_name, model_info in models.items():
    if model_name == 'Linear Regression':  # Skip as it's already trained
        continue
    
    model, param_grid = model_info  # Get model and its parameter grid
    grid_search = GridSearchCV(estimator=model, param_grid=param_grid, scoring='neg_mean_squared_error', cv=5)
    grid_search.fit(x_train, y_train)

    # Save Best Parameters and MSE for each model
    best_models[model_name] = {
        'Best Estimator': grid_search.best_estimator_,
        'Best Params': grid_search.best_params_,
        'Best Score (MSE)': -grid_search.best_score_,
        'Accuracy (R2 Score)': r2_score(y_train, grid_search.predict(x_train)) * 100
    }

# Print Results
for model_name, model_details in best_models.items():
    print(f"{model_name} - Best Params: {model_details.get('Best Params', 'N/A')}")
    print(f"{model_name} - Best MSE: {model_details['Best Score (MSE)']:.2f}")
    print(f"{model_name} - Accuracy (R2 Score): {model_details['Accuracy (R2 Score)']:.2f}%\n")
